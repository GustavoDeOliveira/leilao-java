/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package apresentacao;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import modelo.Cliente;
import modelo.Lote;
import modelo.Servidor;

/**
 *
 * @author Israel Risso
 */
public class janelaServidor extends javax.swing.JFrame {

    //DatagramSocket serverSocket;
    //byte[] receiveData = new byte[1024];
    //byte[] sendData = new byte[1024];
    public static List<Cliente> clientes = new ArrayList();
    List<Lote> lotes = new ArrayList();

    /**
     * Creates new form janelaServidor
     */
    public janelaServidor() throws SocketException, IOException {
        // this.serverSocket = new DatagramSocket(10001);
        initComponents();
        for (int i = 1; i < 5; i++) {
            Lote lote = new Lote();
            lote.descricao = JOptionPane.showInputDialog("descricao lote " + i);
            lote.minimo = Double.parseDouble(JOptionPane.showInputDialog("valor minimo: "));
            lotes.add(lote);
        }

        System.out.println("antes");
        Servidor servidor = new Servidor();
        System.out.println("depois");
        carregarListagem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botaoIniciar = new javax.swing.JButton();
        listaClientes = new java.awt.List();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        botaoIniciar.setText("iniciar");
        botaoIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIniciarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addComponent(botaoIniciar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(107, Short.MAX_VALUE)
                .addComponent(listaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(98, 98, 98))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(listaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(botaoIniciar)
                .addGap(62, 62, 62))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIniciarActionPerformed
        DatagramSocket serverSocket = null;
        try {
            serverSocket = new DatagramSocket(10000);
        } catch (SocketException ex) {
            Logger.getLogger(janelaServidor.class.getName()).log(Level.SEVERE, null, ex);
        }

        byte[] receiveData;
        byte[] sendData;
        String lote;
        DatagramPacket sendPacket;

        for (int i = 0; i < lotes.size(); i++) {
            for (int j = 0; j < clientes.size(); j++) {
                receiveData = new byte[1024];
                sendData = new byte[1024];
                lote = lotes.get(i).descricao + "-" + lotes.get(i).minimo;
                sendData = lote.getBytes();
                sendPacket
                        = new DatagramPacket(sendData, sendData.length, clientes.get(j).ip, clientes.get(j).porta);
                try {
                    serverSocket.send(sendPacket);
                } catch (IOException ex) {
                    Logger.getLogger(janelaServidor.class.getName()).log(Level.SEVERE, null, ex);
                }
                DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
                try {
                    serverSocket.receive(receivePacket);
                } catch (IOException ex) {
                    Logger.getLogger(janelaServidor.class.getName()).log(Level.SEVERE, null, ex);
                }

                double lance = Double.parseDouble(new String(receivePacket.getData()));
                if (lance >= lotes.get(i).minimo && lance > lotes.get(i).vencedor) {
                    lotes.get(i).cliente = clientes.get(j);
                    lotes.get(i).vencedor = lance;

                }
            }
            if (lotes.get(i).cliente == null) {
                lote = "Nenhum lance arrematou o lote";
            } else {
                lote = "Lance ganhador: R$" + lotes.get(i).vencedor + " dado por: " + lotes.get(i).cliente.usuario;
            }
            sendData = new byte[1024];
            sendData = lote.getBytes();
            for (int j = 0; j < clientes.size(); j++) {
                sendPacket = new DatagramPacket(sendData, sendData.length, clientes.get(j).ip, clientes.get(j).porta);
                try {
                    serverSocket.send(sendPacket);
                } catch (IOException ex) {
                    Logger.getLogger(janelaServidor.class.getName()).log(Level.SEVERE, null, ex);
                    this.dispose();
                }

            }

        }

        lote = "Fim do Leilao";
        sendData = new byte[1024];
        sendData = lote.getBytes();
        for (int j = 0; j < clientes.size(); j++) {
            sendPacket = new DatagramPacket(sendData, sendData.length, clientes.get(j).ip, clientes.get(j).porta);
            try {
                serverSocket.send(sendPacket);
            } catch (IOException ex) {
                Logger.getLogger(janelaServidor.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        double total = 0;
        for (int i = 0; i < lotes.size(); i++) {
            total = total + lotes.get(i).vencedor;

        }
        JOptionPane.showMessageDialog(this, "Valor total arrecadado = " + total);
        this.dispose();
    }//GEN-LAST:event_botaoIniciarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(janelaServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(janelaServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(janelaServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(janelaServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new janelaServidor().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(janelaServidor.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoIniciar;
    private java.awt.List listaClientes;
    // End of variables declaration//GEN-END:variables
 private void carregarListagem() {
        this.listaClientes.removeAll();
        for (int i = 0; i < clientes.size(); i++) {
            this.listaClientes.add("cliente: " + clientes.get(i).usuario);
        }
    }

}
